OOPS:
-----
1. Class - template/blueprint
2. Object - instance of a class
3. Constructor
        why? - to initialize instance variable
4. Methods
5. Static(common)
    1. we cannot access non static members inside static blocks.
6. Private, Public


class:
1. attributes - variables
2. behaviour - methods

Inheritance: (extends)
-------------
1. Acquiring properties from parent
2. types:
        1. single
        2. multi level
        3. hierarchical

3. Java do not support multiple inheritance
    reason: method resolution conflict when we have same methods in both the parent classes

parent - child possibilities:
----------------------------
1. parent reference - parent object (possible)
2. son reference - son object (possible)
3. parent reference  - son object (possible)
    1. we can access only methods that are present in parent class
    2. but implementation is gonna be son's implementation.

4. son reference - parent object (not possible)
    1. child reference cannot hold parent class object.

DownCasting:
------------
1. converting parent reference variable to child reference variable to
access child class properties.

((Child)P).<you can access all child class properties>


access modifiers:
-----------------
1. public - no restrictions at all.
2. protected
    1. access is restricted to within the package and within the inherited classes.
3. default -> is the default modifier
    1. access is restricted to with package
    2. thought a class inherits default members from its parent class,
     if it is present in other pkg it cannot access default members.
4. private
        1. access is restricted to just within the class
        2. cannot access outside the class

order: public > protected > default > private

final:
------
variables: then variable becomes a constant(i cannot change the variable value)
methods:  can access it in child classes but cannot override it.

super
this
constructor chaining

Object class is super class for all the classes in java.
toString() -> comes from object class, to have a meaning full representation of object.

Abstraction:
-------------
1. Interface (implements)
    1. can have only abstract methods.
    2. all the methods are public and abstract in interface
    2. all the variables are public final static.
2. Abstract classes
    1. contains both concrete and abstarct methods
 note: cannot create object for interfaces and abstract classes.

installations:
1. create github account
2. install git
3. install maven
4. install intellij

19-02-2022

******
Collections: (generic) (auto boxing/unboxing -> wrapper classes)
1. Array List
2. Linked List
3. Hashmap
4. Hashset
5. TreeSet

Exceptional handling:

Selenium:
----------
what?
why?
basic installation
basic code
****************locators*****************
interactions

high level:
------------
testng
maven
git


Collections:
--------------
1. can i specify size of array later after declaration?
Ans: NO

2. can i store different data types in an array?
Ans: Yes

List:
------
1. Dynamic in size.
2. It can hold multiple data types.
3. It can hold duplicate values.
4. can hold multiple null values.

ArrayList:
-----------
1. Dynamic in size.
2. It can hold multiple data types.
3. It can hold duplicate values.
4. It maintains insertion order.

add()
remove()
set()
size()
contains()
clear()

LinkedList:
-----------
1. Dynamic in size.
2. It can hold multiple data types.
3. It can hold duplicate values.
4. It maintains insertion order.

diff b/w linkedlist and arraylist?
1. linked list -> double linked concept (updations like delete, add, remove)
2. ArrayList -> growable array (retrivel(get))


Set:
----

Hash set:
-----------
1. Dynamic in size
2. can hold different data types
3. cannot store duplicates**
4. unordered (insertion order is not preserved)
5. can hold only one null value.


linkedHashSet:
1. Dynamic in size
2. can hold different data types
3. cannot store duplicates**
5. can hold only one null value.
1. Insertion order is preserved

TreeSet:
1. Dynamic in size
3. cannot store duplicates**
5. can hold only one null value.

1. It stores values in sorted order(default is asc order).
2. can hold only similar data types.


Generics:
----------
we can specify data type for collections using generics concept.
1. we cannot specify primitive data types(specify its wrapper class instead of primitive type)


Map:
----
1. stores elements in key:value format
2. each key:value pair is called an entry.
3. will not maintains insertion order.

key:
-----
1. cannot hold duplicate keys
2. can hold any datatype
3. can have only one null key

values:
--------
1. can hold duplicates
2. can hold duplicated null values.
3. can hold any datatype.


Exception Handling:
-------------------
1. Errors
2. Exceptions
    1. checked
    2. Unchecked














